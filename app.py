"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –æ–±—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
"""
import streamlit as st
from dotenv import load_dotenv
import os
import psycopg2
from psycopg2 import OperationalError
import pandas as pd

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def init_app():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    st.set_page_config(
        page_title="Fleet Status Dashboard",
        page_icon="üöó",
        layout="wide",
        initial_sidebar_state="expanded",
        menu_items={
            'Get Help': 'https://github.com/streamlit/streamlit/issues',
            'Report a bug': 'https://github.com/streamlit/streamlit/issues/new',
            'About': 'Fleet Status Dashboard - Real-time vehicle monitoring'
        }
    )

def display_header():
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –ª–æ–≥–æ—Ç–∏–ø–∞
    """
    st.title("Fleet Status Dashboard")
    # TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–æ—Ç–∏–ø

def connect_to_db(host, dbname, user, password, port, sslmode='require'):
    """
    –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        st.write("Debug: Attempting to connect to DB with params:", {  # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            "host": host,
            "dbname": dbname,
            "user": user,
            "port": port
        })
        conn = psycopg2.connect(
            host=host,
            port=int(port),
            user=user,
            password=password,
            dbname=dbname,
            sslmode=sslmode
        )
        st.write("Debug: Connection successful")  # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        return conn
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return None

def check_connection(conn):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
    """
    try:
        cursor = conn.cursor()
        cursor.execute("SELECT 1")
        st.write("Debug: Connection check successful")  # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        return True
    except Exception as e:
        st.write(f"Debug: Connection check failed: {e}")  # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        return False

def display_db_connection():
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    """
    with st.sidebar:
        st.header("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î")
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è .env
        if st.button("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å .env"):
            try:
                st.write("Debug: Using .env credentials")  # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                conn = connect_to_db(
                    host=os.getenv('DB_HOST'),
                    dbname=os.getenv('DB_NAME'),
                    user=os.getenv('DB_USER'),
                    password=os.getenv('DB_PASSWORD'),
                    port=os.getenv('DB_PORT', '5432')
                )
                if conn:
                    st.session_state["conn"] = conn
                    st.success("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
                    st.write("Debug: Connection stored in session_state")  # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ .env: {e}")
        
        # –†—É—á–Ω–æ–π –≤–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        st.subheader("–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Ä—É—á–Ω—É—é:")
        host = st.text_input("Host", value="")
        dbname = st.text_input("Database Name", value="")
        user = st.text_input("Username", value="")
        password = st.text_input("Password", type="password")
        port = st.text_input("Port", value="5432")
        
        connect_button = st.button("–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
        
        if connect_button:
            conn = connect_to_db(host, dbname, user, password, port)
            if conn:
                st.session_state["conn"] = conn
                st.success("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
                st.write("Debug: Connection stored in session_state")  # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            else:
                st.session_state["conn"] = None
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        conn = st.session_state.get("conn", None)
        if conn and check_connection(conn):
            st.success("–°—Ç–∞—Ç—É—Å: –ü–æ–¥–∫–ª—é—á–µ–Ω–æ")
            st.write("Debug: Connection is valid")  # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        elif conn:
            st.error("–°—Ç–∞—Ç—É—Å: –û—Ç–∫–ª—é—á–µ–Ω–æ")
            st.session_state.pop("conn")
            conn = None
        else:
            st.warning("–°—Ç–∞—Ç—É—Å: –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ")

def check_auth():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    if "conn" not in st.session_state or not st.session_state["conn"]:
        display_db_connection()
        return False
    return True

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    init_app()
    display_header()
    
    if check_auth():
        tabs = st.tabs(["Moving Status", "Shifts", "Measurment"])
        with tabs[0]:
            try:
                if "conn" in st.session_state and st.session_state["conn"]:
                    from dashboards.fleet_status import run_dashboard
                    run_dashboard()
                else:
                    st.warning("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –≤ Moving Status: {e}")
        with tabs[1]:
            try:
                if "conn" in st.session_state and st.session_state["conn"]:
                    from dashboards.shifts import run_shifts_dashboard
                    run_shifts_dashboard()
                else:
                    st.warning("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –≤ Shifts: {e}")
        with tabs[2]:
            try:
                if "conn" in st.session_state and st.session_state["conn"]:
                    from dashboards.measurment import run_measurment_dashboard
                    run_measurment_dashboard()
                else:
                    st.warning("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –≤ Measurment: {e}")
    else:
        st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")

if __name__ == "__main__":
    main() 